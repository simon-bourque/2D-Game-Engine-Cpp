#pragma once

#include "Core/Platform.h"

#ifdef USING_GLFW_WINDOW
#include <GLFW/glfw3.h>
#endif

#ifdef USING_WIN32_WINDOW
#include <Windows.h>
#endif

namespace Actions {

#ifdef USING_GLFW_WINDOW
	enum Action {
		RELEASE = GLFW_RELEASE,
		PRESS = GLFW_PRESS,
		REPEAT = GLFW_REPEAT
	};
#endif

#ifdef USING_WIN32_WINDOW
	enum Action {
		RELEASE,
		PRESS,
		REPEAT
	};
#endif
}

namespace Keys {

#ifdef USING_GLFW_WINDOW
	enum Key {
		KEY_UNKNOWN = GLFW_KEY_UNKNOWN,

		KEY_SPACE = GLFW_KEY_SPACE,
		KEY_APOSTROPHE = GLFW_KEY_APOSTROPHE,
		KEY_COMMA = GLFW_KEY_COMMA,
		KEY_MINUS = GLFW_KEY_MINUS,
		KEY_PERIOD = GLFW_KEY_PERIOD,
		KEY_SLASH = GLFW_KEY_SLASH,
		KEY_0 = GLFW_KEY_0,
		KEY_1 = GLFW_KEY_1,
		KEY_2 = GLFW_KEY_2,
		KEY_3 = GLFW_KEY_3,
		KEY_4 = GLFW_KEY_4,
		KEY_5 = GLFW_KEY_5,
		KEY_6 = GLFW_KEY_6,
		KEY_7 = GLFW_KEY_7,
		KEY_8 = GLFW_KEY_8,
		KEY_9 = GLFW_KEY_9,
		KEY_SEMICOLON = GLFW_KEY_SEMICOLON,
		KEY_EQUAL = GLFW_KEY_EQUAL,
		KEY_A = GLFW_KEY_A,
		KEY_B = GLFW_KEY_B,
		KEY_C = GLFW_KEY_C,
		KEY_D = GLFW_KEY_D,
		KEY_E = GLFW_KEY_E,
		KEY_F = GLFW_KEY_F,
		KEY_G = GLFW_KEY_G,
		KEY_H = GLFW_KEY_H,
		KEY_I = GLFW_KEY_I,
		KEY_J = GLFW_KEY_J,
		KEY_K = GLFW_KEY_K,
		KEY_L = GLFW_KEY_L,
		KEY_M = GLFW_KEY_M,
		KEY_N = GLFW_KEY_N,
		KEY_O = GLFW_KEY_O,
		KEY_P = GLFW_KEY_P,
		KEY_Q = GLFW_KEY_Q,
		KEY_R = GLFW_KEY_R,
		KEY_S = GLFW_KEY_S,
		KEY_T = GLFW_KEY_T,
		KEY_U = GLFW_KEY_U,
		KEY_V = GLFW_KEY_V,
		KEY_W = GLFW_KEY_W,
		KEY_X = GLFW_KEY_X,
		KEY_Y = GLFW_KEY_Y,
		KEY_Z = GLFW_KEY_Z,
		KEY_LEFT_BRACKET = GLFW_KEY_LEFT_BRACKET,
		KEY_BACKSLASH = GLFW_KEY_BACKSLASH,
		KEY_RIGHT_BRACKET = GLFW_KEY_RIGHT_BRACKET,
		KEY_GRAVE_ACCENT = GLFW_KEY_GRAVE_ACCENT,
		KEY_WORLD_1 = GLFW_KEY_WORLD_1,
		KEY_WORLD_2 = GLFW_KEY_WORLD_2,

		KEY_ESCAPE = GLFW_KEY_ESCAPE,
		KEY_ENTER = GLFW_KEY_ENTER,
		KEY_TAB = GLFW_KEY_TAB,
		KEY_BACKSPACE = GLFW_KEY_BACKSPACE,
		KEY_INSERT = GLFW_KEY_INSERT,
		KEY_DELETE = GLFW_KEY_DELETE,
		KEY_RIGHT = GLFW_KEY_RIGHT,
		KEY_LEFT = GLFW_KEY_LEFT,
		KEY_DOWN = GLFW_KEY_DOWN,
		KEY_UP = GLFW_KEY_UP,
		KEY_PAGE_UP = GLFW_KEY_PAGE_UP,
		KEY_PAGE_DOWN = GLFW_KEY_PAGE_DOWN,
		KEY_HOME = GLFW_KEY_HOME,
		KEY_END = GLFW_KEY_END,
		KEY_CAPS_LOCK = GLFW_KEY_CAPS_LOCK,
		KEY_SCROLL_LOCK = GLFW_KEY_SCROLL_LOCK,
		KEY_NUM_LOCK = GLFW_KEY_NUM_LOCK,
		KEY_PRINT_SCREEN = GLFW_KEY_PRINT_SCREEN,
		KEY_PAUSE = GLFW_KEY_PAUSE,
		KEY_F1 = GLFW_KEY_F1,
		KEY_F2 = GLFW_KEY_F2,
		KEY_F3 = GLFW_KEY_F3,
		KEY_F4 = GLFW_KEY_F4,
		KEY_F5 = GLFW_KEY_F5,
		KEY_F6 = GLFW_KEY_F6,
		KEY_F7 = GLFW_KEY_F7,
		KEY_F8 = GLFW_KEY_F8,
		KEY_F9 = GLFW_KEY_F9,
		KEY_F10 = GLFW_KEY_F10,
		KEY_F11 = GLFW_KEY_F11,
		KEY_F12 = GLFW_KEY_F12,
		KEY_F13 = GLFW_KEY_F13,
		KEY_F14 = GLFW_KEY_F14,
		KEY_F15 = GLFW_KEY_F15,
		KEY_F16 = GLFW_KEY_F16,
		KEY_F17 = GLFW_KEY_F17,
		KEY_F18 = GLFW_KEY_F18,
		KEY_F19 = GLFW_KEY_F19,
		KEY_F20 = GLFW_KEY_F20,
		KEY_F21 = GLFW_KEY_F21,
		KEY_F22 = GLFW_KEY_F22,
		KEY_F23 = GLFW_KEY_F23,
		KEY_F24 = GLFW_KEY_F24,
		KEY_F25 = GLFW_KEY_F25,
		KEY_KP_0 = GLFW_KEY_KP_0,
		KEY_KP_1 = GLFW_KEY_KP_1,
		KEY_KP_2 = GLFW_KEY_KP_2,
		KEY_KP_3 = GLFW_KEY_KP_3,
		KEY_KP_4 = GLFW_KEY_KP_4,
		KEY_KP_5 = GLFW_KEY_KP_5,
		KEY_KP_6 = GLFW_KEY_KP_6,
		KEY_KP_7 = GLFW_KEY_KP_7,
		KEY_KP_8 = GLFW_KEY_KP_8,
		KEY_KP_9 = GLFW_KEY_KP_9,
		KEY_KP_DECIMAL = GLFW_KEY_KP_DECIMAL,
		KEY_KP_DIVIDE = GLFW_KEY_KP_DIVIDE,
		KEY_KP_MULTIPLY = GLFW_KEY_KP_MULTIPLY,
		KEY_KP_SUBTRACT = GLFW_KEY_KP_SUBTRACT,
		KEY_KP_ADD = GLFW_KEY_KP_ADD,
		KEY_KP_ENTER = GLFW_KEY_KP_ENTER,
		KEY_KP_EQUAL = GLFW_KEY_KP_EQUAL,
		KEY_LEFT_SHIFT = GLFW_KEY_LEFT_SHIFT,
		KEY_LEFT_CONTROL = GLFW_KEY_LEFT_CONTROL,
		KEY_LEFT_ALT = GLFW_KEY_LEFT_ALT,
		KEY_LEFT_SUPER = GLFW_KEY_LEFT_SUPER,
		KEY_RIGHT_SHIFT = GLFW_KEY_RIGHT_SHIFT,
		KEY_RIGHT_CONTROL = GLFW_KEY_RIGHT_CONTROL,
		KEY_RIGHT_ALT = GLFW_KEY_RIGHT_ALT,
		KEY_RIGHT_SUPER = GLFW_KEY_RIGHT_SUPER,
		KEY_MENU = GLFW_KEY_MENU,
		KEY_LAST = GLFW_KEY_LAST
	};
#endif

#ifdef USING_WIN32_WINDOW
	enum Key {
		//KEY_UNKNOWN = GLFW_KEY_UNKNOWN,

		KEY_SPACE = VK_SPACE,
		KEY_APOSTROPHE = VK_OEM_7,
		KEY_COMMA = VK_OEM_COMMA,
		KEY_MINUS = VK_OEM_MINUS,
		KEY_PERIOD = VK_OEM_PERIOD,
		KEY_SLASH = VK_OEM_2,
		KEY_0 = 0x30,
		KEY_1 = 0x31,
		KEY_2 = 0x32,
		KEY_3 = 0x33,
		KEY_4 = 0x34,
		KEY_5 = 0x35,
		KEY_6 = 0x36,
		KEY_7 = 0x37,
		KEY_8 = 0x38,
		KEY_9 = 0x39,
		KEY_SEMICOLON = VK_OEM_1,
		KEY_EQUAL = VK_OEM_PLUS,
		KEY_A = 0x41,
		KEY_B = 0x42,
		KEY_C = 0x43,
		KEY_D = 0x44,
		KEY_E = 0x45,
		KEY_F = 0x46,
		KEY_G = 0x47,
		KEY_H = 0x48,
		KEY_I = 0x49,
		KEY_J = 0x4A,
		KEY_K = 0x4B,
		KEY_L = 0x4C,
		KEY_M = 0x4D,
		KEY_N = 0x4E,
		KEY_O = 0x4F,
		KEY_P = 0x50,
		KEY_Q = 0x51,
		KEY_R = 0x52,
		KEY_S = 0x53,
		KEY_T = 0x54,
		KEY_U = 0x55,
		KEY_V = 0x56,
		KEY_W = 0x57,
		KEY_X = 0x58,
		KEY_Y = 0x59,
		KEY_Z = 0x5A,
		KEY_LEFT_BRACKET = VK_OEM_4,
		KEY_BACKSLASH = VK_OEM_5,
		KEY_RIGHT_BRACKET = VK_OEM_6,
		KEY_GRAVE_ACCENT = VK_OEM_3,
		//KEY_WORLD_1 = GLFW_KEY_WORLD_1,
		//KEY_WORLD_2 = GLFW_KEY_WORLD_2,

		KEY_ESCAPE = VK_ESCAPE,
		KEY_ENTER = VK_RETURN,
		KEY_TAB = VK_TAB,
		KEY_BACKSPACE = VK_BACK,
		KEY_INSERT = VK_INSERT,
		KEY_DELETE = VK_DELETE,
		KEY_RIGHT = VK_RIGHT,
		KEY_LEFT = VK_LEFT,
		KEY_DOWN = VK_DOWN,
		KEY_UP = VK_UP,
		KEY_PAGE_UP = VK_PRIOR,
		KEY_PAGE_DOWN = VK_NEXT,
		KEY_HOME = VK_HOME,
		KEY_END = VK_END,
		KEY_CAPS_LOCK = VK_CAPITAL,
		KEY_SCROLL_LOCK = VK_SCROLL,
		KEY_NUM_LOCK = VK_NUMLOCK,
		KEY_PRINT_SCREEN = VK_SNAPSHOT,
		KEY_PAUSE = VK_PAUSE,
		KEY_F1 = VK_F1,
		KEY_F2 = VK_F2,
		KEY_F3 = VK_F3,
		KEY_F4 = VK_F4,
		KEY_F5 = VK_F5,
		KEY_F6 = VK_F6,
		KEY_F7 = VK_F7,
		KEY_F8 = VK_F8,
		KEY_F9 = VK_F9,
		KEY_F10 = VK_F10,
		KEY_F11 = VK_F11,
		KEY_F12 = VK_F12,
		KEY_F13 = VK_F13,
		KEY_F14 = VK_F14,
		KEY_F15 = VK_F15,
		KEY_F16 = VK_F16,
		KEY_F17 = VK_F17,
		KEY_F18 = VK_F18,
		KEY_F19 = VK_F19,
		KEY_F20 = VK_F20,
		KEY_F21 = VK_F21,
		KEY_F22 = VK_F22,
		KEY_F23 = VK_F23,
		KEY_F24 = VK_F24,
		//KEY_F25 = VK_F25,
		KEY_KP_0 = VK_NUMPAD0,
		KEY_KP_1 = VK_NUMPAD1,
		KEY_KP_2 = VK_NUMPAD2,
		KEY_KP_3 = VK_NUMPAD3,
		KEY_KP_4 = VK_NUMPAD4,
		KEY_KP_5 = VK_NUMPAD5,
		KEY_KP_6 = VK_NUMPAD6,
		KEY_KP_7 = VK_NUMPAD7,
		KEY_KP_8 = VK_NUMPAD8,
		KEY_KP_9 = VK_NUMPAD9,
		KEY_KP_DECIMAL = VK_DECIMAL,
		KEY_KP_DIVIDE = VK_DIVIDE,
		KEY_KP_MULTIPLY = VK_MULTIPLY,
		KEY_KP_SUBTRACT = VK_SUBTRACT,
		KEY_KP_ADD = VK_ADD,

		//KEY_KP_ENTER = GLFW_KEY_KP_ENTER,
		//KEY_KP_EQUAL = GLFW_KEY_KP_EQUAL,

		KEY_LEFT_SHIFT = VK_LSHIFT,
		KEY_LEFT_CONTROL = VK_LCONTROL,
		KEY_LEFT_ALT = VK_LMENU,
		KEY_LEFT_SUPER = VK_LWIN,
		KEY_RIGHT_SHIFT = VK_RSHIFT,
		KEY_RIGHT_CONTROL = VK_RCONTROL,
		KEY_RIGHT_ALT = VK_RMENU,
		KEY_RIGHT_SUPER = VK_RWIN,
		KEY_MENU = VK_APPS,
		//KEY_LAST = GLFW_KEY_LAST
	};
#endif
}

namespace Mods {

#ifdef USING_GLFW_WINDOW
	enum Mod {
		MOD_SHIFT_BIT = GLFW_MOD_SHIFT,
		MOD_CONTROL_BIT = GLFW_MOD_CONTROL,
		MOD_ALT_BIT = GLFW_MOD_ALT,
		//MOD_SUPER_BIT = GLFW_MOD_SUPER,
	};
#endif

#ifdef USING_WIN32_WINDOW
	enum Mod {
		MOD_SHIFT_BIT = 0x1,
		MOD_CONTROL_BIT = 0x2,
		MOD_ALT_BIT = 0x4,
		//MOD_SUPER_BIT = 0x8,
	};
#endif
}

namespace MouseButtons {

#ifdef USING_GLFW_WINDOW
	enum MouseButton {
		MOUSE_BUTTON_1 = GLFW_MOUSE_BUTTON_1,
		MOUSE_BUTTON_2 = GLFW_MOUSE_BUTTON_2,
		MOUSE_BUTTON_3 = GLFW_MOUSE_BUTTON_3,
		MOUSE_BUTTON_4 = GLFW_MOUSE_BUTTON_4,
		MOUSE_BUTTON_5 = GLFW_MOUSE_BUTTON_5,
		//MOUSE_BUTTON_6 = GLFW_MOUSE_BUTTON_6,
		//MOUSE_BUTTON_7 = GLFW_MOUSE_BUTTON_7,
		//MOUSE_BUTTON_8 = GLFW_MOUSE_BUTTON_8,
		//MOUSE_BUTTON_LAST = GLFW_MOUSE_BUTTON_LAST,
		MOUSE_BUTTON_LEFT = GLFW_MOUSE_BUTTON_LEFT,
		MOUSE_BUTTON_RIGHT = GLFW_MOUSE_BUTTON_RIGHT,
		MOUSE_BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_MIDDLE
	};
#endif

#ifdef USING_WIN32_WINDOW
	enum MouseButton {
		MOUSE_BUTTON_1,
		MOUSE_BUTTON_2,
		MOUSE_BUTTON_3,
		MOUSE_BUTTON_4,
		MOUSE_BUTTON_5,
		MOUSE_BUTTON_LEFT = MOUSE_BUTTON_1,
		MOUSE_BUTTON_RIGHT = MOUSE_BUTTON_2,
		MOUSE_BUTTON_MIDDLE = MOUSE_BUTTON_3
	};
#endif

}